import React, { useState, useEffect, useRef } from 'react';
import { View, Text, StyleSheet, FlatList, TextInput, Button, TouchableWithoutFeedback, TouchableOpacity, Keyboard, Alert, KeyboardAvoidingView } from 'react-native';
import Icon from 'react-native-vector-icons/FontAwesome';
import Header from '../components/Header';
import firestore from '@react-native-firebase/firestore';

const MessagesScreen = ({ route }) => {
    const contactPerson = route?.params?.firstname ? route.params.firstname + ' ' + route.params.lastname + '\'s Messages' : 'Messages';
    const contactId = route?.params?.id ? route.params.id : 'testMessages';
    // console.log('Contact person is ' + contactPerson);
    const db = firestore().collection(contactId);
    const [messages, setMessages] = useState([]);
    const [roleA, setRoleA] = useState(true);
    const [inputText, setInputText] = useState('');
    const messagesListRef = useRef(null);
   
    const textInputHandler = (enteredText) => {
        setInputText(enteredText)
    };

    useEffect(() => {
        db
            .orderBy('create', 'desc')
            .onSnapshot((snapshot) => {
                const newMessages = snapshot.docs.map((doc) => ({
                    id: doc.id, // id generated by firebase
                    ...doc.data()
                }))
                setMessages(newMessages)
            })
    }, [contactId]); 

    const sendButtonHandler = () => {
        if (inputText.length > 0) {
            // add to the firebase firestore
            db
                .add({
                    message: inputText,
                    role: roleA ? 'A' : 'B',
                    create: new Date()
                })
                .then( () => {
                    setInputText('')
                })
            // setMessages(currentMessages => [...currentMessages, {id: Math.random().toString(), role: roleA ? 'A' : 'B', data: inputText}]);       
        } 
    };

    const deleteMessageHandler = (id) => {
        db
            .doc(id)
            .delete();
    };

    const changeRoleHandler = () => {
        if (roleA) {
            setRoleA(false)
        } else setRoleA(true);  
    };

    const messagePressHandler = (id) => {
        Alert.alert('Delete', 'I want to delete the message', 
        [{text: "Delete", onPress: () => deleteMessageHandler(id), style: 'destructive'}, {text: "Cancel"}]);
    };

    return (
        <KeyboardAvoidingView
            behavior='padding'
            style={styles.avoidView}>
            <TouchableWithoutFeedback onPress={Keyboard.dismiss}>
                <View style={styles.mainScreen}>
                    <Header header={contactPerson}/>
                    <View style={styles.chatArea}>
                        <FlatList
                            inverted // always show from bottom
                            ref={messagesListRef}
                            data={messages} 
                            renderItem={({item}) =>
                                <TouchableOpacity style={styles.singleTextContainer} 
                                onLongPress={messagePressHandler.bind(this, item.id)}>
                                    <Text style={item.role == 'A' ? styles.textA : styles.textB}>{item.message}</Text>
                                </TouchableOpacity>}
                            keyExtractor={item => item.id}
                            getItemLayout={(data, index) => (
                                {length: 100, offset: 100* index, index}
                            )}
                        />
                    </View>    
                    <View style={styles.inputContainer}>
                        <TextInput placeholder='Type your message' style={styles.textInput} multiline numberOfLines={3} onChangeText={textInputHandler} value={inputText}/>
                        <TouchableOpacity onPress={sendButtonHandler}>
                            <Icon name="paper-plane" size={25} style={styles.iconContainter}/>
                        </TouchableOpacity>    
                    </View>
                    <View style={styles.buttonContainter} >
                            <Button title="Change role" color="black" onPress={changeRoleHandler}/>      
                    </View>              
                </View>
            </TouchableWithoutFeedback>
        </KeyboardAvoidingView>
  );
};

const styles = StyleSheet.create({
    avoidView: {
        flex: 1,
    },
    mainScreen: {
        flex: 1,
        backgroundColor: '#059142',
    },
    chatArea: {
        flex: 9,
        paddingTop: 10,
        paddingBottom: 5,
        paddingHorizontal: 15,
        backgroundColor: 'white',
    },
    inputContainer: {
        flex: 1,
        paddingTop: 10,
        flexDirection: 'row',
        backgroundColor: 'white',
    },
    textInput: {
        marginHorizontal: 13,
        width: 350,
        height: 50,
        paddingVertical: 10,
        paddingLeft: 10,
        borderWidth: 1,
        borderColor: 'gray',
        borderRadius: 10,
    },
    iconContainter: {
        marginRight: 7,
        paddingTop: 9,
        color: '#059142',
    },
    singleTextContainer: {
        paddingVertical: 2,
    },
    textA: {
        fontSize: 15,
        alignSelf: 'flex-start',
        borderColor: 'gray',
        borderWidth: 0.5,
        margin: 3,
        borderRadius: 10,
        paddingVertical: 3,
        paddingHorizontal: 10,  
        maxWidth: 280,  
    },
    textB: {
        color: 'blue',
        fontSize: 15,
        alignSelf: 'flex-end',
        borderColor: '#059142',
        borderWidth: 0.5,
        margin: 3,
        borderRadius: 10,
        paddingVertical: 3,
        paddingHorizontal: 10,
        maxWidth: 280
    },
    buttonContainter: {
        flexDirection: 'row',
        justifyContent: 'space-around',
    }
});

export default MessagesScreen;

{/* <ScrollView >
        {messages.map(message => 
            <TouchableOpacity style={styles.singleTextContainer} key={message.id} onLongPress={messagePressHandler.bind(this, message.id)}>
                <Text style={message.role == 'A' ? styles.textA : styles.textB}>{message.message}</Text>
            </TouchableOpacity>)}      
    </ScrollView>            */}

        